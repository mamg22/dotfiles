#!/bin/sh

#TODO: Rewrite in python

### Begin configuration

xdg_videos_dir="$(xdg-user-dir VIDEOS)"

output_dir="$xdg_videos_dir"
filename_format="%(uploader)s/%(title)s-%(id)s.%(ext)s"
format='webm'
resolution=480
info_dir=~/.cache/yd

### End of configuration

usage()
{
    cat <<EOF
usage: $(basename "$0") [options]... url

An easy to use wrapper for youtube-dl with caching, resistant to slow and
unstable internet connections.

Available options:
    -a              Download only the best available audio     
    -c              Use the contents of the clipboard instead of the given url
    -C DIRECTORY    Use DIRECTORY as base directory for downloads
    -f FORMAT       Download video in format FORMAT
                    Currently only supports mp4 and webm as formats
    -F              Show available formats and exit
    -h              Display this help and exit
    -j              Print json data filename and exit
                    Specify twice to only generate filename, print it and
                    don't download anything
    -o YTDLFORMAT   Use YTDLFORMAT as the filename format passed to youtube-dl
    -r RESOLUTION   Minimum video resolution to download
    -X              Remove cache file generated for the given url
                    Specify twice to exit after removing the cache file
    -y YTDLOPTIONS  Pass YTDLOPTIONS directly to youtube-dl
                    Multiple uses append to the other options

EOF
}

hash_url()
{
    printf "%s" "$url" | md5sum | cut -d' ' -f1
}

get_json_filename()
{
    url="$1"

    # Hash the url, so it is able to continue if interrupted
    url_hash="$(hash_url "$url")"
    json_info="$info_dir/$url_hash.info.json"

    echo "$json_info"
}

# Get the information json instead of downloading again every time
get_info_json()
{
    json_info="$(get_json_filename)"

    # Get a file descriptor and lock it
    exec 9>"$json_info"
    flock 9

    # Only download if doesn't exist, is too small to be valid or isn't valid json
    while [ ! -e "$json_info" ] ||
        [ "$(stat -c %s "$json_info")" -lt 1024 ] ||
        jc -e . "$json_info" >/dev/null 2>&1; do
        # Remove any json information that failed to download
        rm -f "$json_info"
        untildone youtube-dl --dump-single-json --skip-download -- "$url" > "$json_info"
    done
    # Unlock the file
    flock -u 9
    echo "$json_info"
}

download()
{
    format="$1"
    output="$2"
    url="$3"
    opts="$4"
    # Get the json info location
    info="$(get_info_json "$url")"
    untildone youtube-dl -f "$format" -o "$output" --load-info-json "$info" --add-metadata $opts -- "$url"
}

# Parse arguments
while getopts acC:f:Fhjo:r:Xy: name; do
    case "$name" in
        (a)
            audio_only=1
            ;;
        (c)
            use_clipboard=1
            ;;
        (C)
            output_dir="$OPTARG"
            ;;
        (f)
            format="$OPTARG"
            ;;
        (F)
            show_formats=1
            ;;
        (h)
            usage >&2
            exit 0
            ;;
        (j) 
            [ "$print_json_filename" = 1 ] && print_only_filename=1
            print_json_filename=1
            ;;
        (o)
            filename_format="$OPTARG"
            ;;
        (r)
            resolution="$OPTARG"
            ;;
        (X)
            [ "$remove_cache_file" = 1 ] &&  exit_after_remove=1
            remove_cache_file=1
            ;;
        (y)
            ytdl_opts="$ytdl_opts $OPTARG"
            ;;
        (?)
            exit 2
            ;;
    esac
done
shift $((OPTIND - 1))

# Get the url
url="$1"
[ -n "$use_clipboard" ] && url="$(xsel -bo)"

if [ -z "$url" ]; then
    echo "No url provided" >&2
    exit 1
fi

# Make the info cache directory
[ ! -e "$info_dir" ] && mkdir -p "$info_dir"

# Determine the output filename
output_format="$output_dir/$filename_format"

if [ -n "$remove_cache_file" ]; then
    echo Clearing information cache for "$url"
    rm "$(get_json_filename "$url")"
    [ "$exit_after_remove" ] && exit 0
fi

if [ -n "$show_formats" ]; then
    youtube-dl --load-info-json "$(get_info_json "$url")" -F -- "$url"
    exit 0
fi

if [ -n "$print_json_filename" ]; then
    [ "$print_only_filename" ] && get_json_filename "$url" && exit 0

    echo "$(get_info_json "$url")"
    exit 0
fi

if [ "$format" = 'webm' ]; then
    vformat='vp9'
    aformat='opus'
fi

if [ "$format" = 'mp4' ]; then
    vformat='avc1'
    aformat='mp4a'
fi

format_str="worstvideo[height>=$resolution][vcodec*=$vformat]+bestaudio[acodec*=$aformat]/worst[height>=$resolution]" 

if [ -n "$audio_only" ]; then
    format_str="bestaudio[acodec*=$aformat]/worst"
fi

download "$format_str" "$output_format" "$url" "$ytdl_opts"
