#!/bin/sh

queue=~/.cache/vq-queue
preview_file="/tmp/vq-preview"
download_lock="/tmp/vq-download-lock"

# TODO: Add file locking to race conditions or other queue access problems

download()
{
    [ -e "$queue" ] || exit 1

    touch "$download_lock"
    exec 9> "$download_lock"
    if ! flock --nonblock 9; then
        echo "Another instance of $(basename "$0") is already downloading" >&2
        exit 4
    fi
    trap "flock -u 9; exit 0" INT TERM

    while [ -s "$queue" ]; do
        while read url resolution format; do
            notify-send "Video downloader" "Downloading $url"
            [ "$resolution" ] && resolution="-r$resolution"
            [ "$format" ] && format="-f$format"

            yd $resolution $format "$url" && flock "$queue" sed -i 1d "$queue"

            notify-send "Video downloader" "Finished downloading $url"
            unset resolution
            unset format
        done <<EOF
$(head -n 1 "$queue")
EOF
    done
    flock -u 9
}

format_seconds()
{
    h="$((${1}/3600))"
    m="$(((${1}%3600)/60))"
    s="$((${1}%60))"
    if [ "$h" -eq 0 ]; then
        printf "%02d:%02d\n" $m $s
    else
        printf "%02d:%02d:%02d\n" $h $m $s
    fi
}

get_duration()
{
    duration="$(jq -j .duration "$1")"
    format_seconds "$duration"
}

get_title()
{
    jq -j .title "$1" | tr -d '\n'
}

get_uploader()
{
    jq -j .uploader "$1"
}

get_formats()
{
    # TODO: Seguir probando con:
    # jq -j '.formats[] | [([ .format_id, .ext] | join(":"))] | join(":")' "$(yd -j 'https://www.youtube.com/watch?v=_ijnXe4ATT8')"
    # Para recrear lo mismo que ytdl
    yd -F "$1"
}

generate_preview()
{
    url="$1"
    [ "$url" ] || exit 0

    file="$(yd -j "$url")"
    printf "\e[1mTitle: %s\e[0m\nUploader: %s\nDuration: %s\n%s\n" \
        "$(get_title "$file")" \
        "$(get_uploader "$file")" \
        "$(get_duration "$file")" \
        "$(get_formats "$url")"
}

preview()
{
    exec 2>/dev/null

    echo "Loading preview"

    # Use a file instead of piping into less allows it to show the "Loading preview" text
    generate_preview "$1" > "$preview_file" 2>/dev/null
    less -R "$preview_file"

    exit 0
}

enqueue()
{
    url="$1"
    [ -n "$use_clipboard" ] && url="$(xsel -bo)"
    [ "$url" ] || exit 0

    echo "Pressing enter indicates the default"

    while true; do
        printf "Video resolution and format to download (p for preview): "
        read -r resolution format

        if [ "$resolution" = "p" ]; then
            if [ -z "$preview_pane" ]; then
                preview_pane="$(tmux split-window -d -v -P -p 80 "$0 -p '$url'")"
                trap "tmux kill-pane -t $preview_pane 2>/dev/null; exit 0" INT TERM
            fi

            continue;
        fi

        [ -n "$preview_pane" ] && tmux kill-pane -t "$preview_pane" 2>/dev/null
        break;
    done

    flock "$queue" echo "$url $resolution $format" >> "$queue"

    exit 0
}

edit()
{
    queue=~/.cache/youtube-download-queue

    st -c floating-st -e tmux new-session -s edit-queue "$EDITOR" "$queue"
}

unset operation
while getopts cdenp name; do
    case "$name" in
        (c)
            use_clipboard=1
            ;;
        (d)
            operation=download
            ;;
        (e)
            operation=edit
            ;;
        (n)
            operation=enqueue
            ;;
        (p)
            operation=preview
            ;;
        (?)
            exit 2
            ;;
    esac
done
shift $((OPTIND - 1))

[ "$operation" ] || exit 3

$operation "$@"
