#!/bin/sh

queue=~/.cache/vq-queue
preview_file="/tmp/vq-preview"
download_lock="/tmp/vq-download-lock"

isatty()
{
    # True if file descriptor 0 (stdin) is a terminal
    test -t 0
}

usage()
{
    cat <<EOF
usage: $(basename "$0") [options]... url

A video download queue manager based on yd

Must specify at least one operation in the options

Operations:
    -d          Download
    -e          Edit queue
    -n          Add to queue
    -h          Show usage information

Available options:
    -c          Use the contents of the clipboard instead of the given url
    -f FORMAT   Set video format (either "webm" or "mp4") to FORMAT
    -i          Force interactive mode
    -I          Force non-interactive mode
    -r RES      Set video resolution to RES
EOF
}

download()
{
    [ -e "$queue" ] || exit 1

    touch "$download_lock"
    exec 9> "$download_lock"

    if ! flock --nonblock 9; then
        message="Another instance of $(basename "$0") is already downloading"

        if isatty; then
            echo "$message" >&2
        else
            notify-send "Video downloader" "$message"
        fi
        exit 4
    fi

    # On interruption or termination:
    # Unlock the download_lock file, wait a second (This solves a weird
    # issue were output keeps appearing even after the shell prompt appears,
    # and exit
    trap "flock -u 9; sleep 1; exit 0" INT TERM

    while [ -s "$queue" ]; do
        echo "$(head -n 1 "$queue")" |
            while read url resolution format; do
                notify-send "Video downloader" "Downloading $url"
                [ "$resolution" ] && resolution="-r$resolution"
                [ "$format" ] && format="-f$format"

                yd $resolution $format "$url" && flock "$queue" sed -i 1d "$queue"

                notify-send "Video downloader" "Finished downloading $url"
                unset resolution
                unset format
            done
    done
    flock -u 9
}

format_seconds()
{
    h="$((${1}/3600))"
    m="$(((${1}%3600)/60))"
    s="$((${1}%60))"
    if [ "$h" -eq 0 ]; then
        printf "%02d:%02d\n" $m $s
    else
        printf "%02d:%02d:%02d\n" $h $m $s
    fi
}

get_duration()
{
    duration="$(jq -j .duration "$1")"
    format_seconds "$duration"
}

get_title()
{
    jq -j .title "$1" | tr -d '\n'
}

get_uploader()
{
    jq -j .uploader "$1"
}

get_formats()
{
    # TODO: Keep testing with:
    # jq -j '.formats[] | [([ .format_id, .ext] | join(":"))] | join(":")' "$(yd -j 'https://www.youtube.com/watch?v=_ijnXe4ATT8')"
    # To recreate something like youtube-dl -F $url
    yd -F "$1"
}

generate_preview()
{
    url="$1"
    [ "$url" ] || return

    file="$(yd -j "$url")"
    printf "\e[1mTitle: %s\e[0m\nUploader: %s\nDuration: %s\n%s\n" \
        "$(get_title "$file")" \
        "$(get_uploader "$file")" \
        "$(get_duration "$file")" \
        "$(get_formats "$url")"
}

preview()
{
    echo "Loading preview"

    generate_preview "$1"
}

is_interactive()
{
    # If no interactivity mode is set, guess it
    if [ -z "$interactive" ]; then
        isatty
        return
    else
        return "$((!interactive))"
    fi
}

enqueue()
{
    url="$1"
    [ -n "$use_clipboard" ] && url="$(xsel -bo)"

    if [ -z "$url" ]; then
        echo "No url provided"
        exit 5
    fi

    if is_interactive; then
        while true; do
            printf "%s\n%s" \
                "Video resolution and format to download" \
                "(empty for default, p for preview): "

            read -r resolution format

            if [ "$resolution" = "p" ]; then
                preview "$url"
                continue;
            fi

            break
        done
    fi

    flock "$queue" echo "$url $resolution $format" >> "$queue"

    exit 0
}

edit()
{
    if isatty; then
        "$EDITOR" "$queue"
    else
        "$TERMINAL" -c floating-st -e tmux new-session -s edit-queue "$EDITOR" "$queue"
    fi
}

unset operation
while getopts cdef:hiInpr: name; do
    case "$name" in
        (c)
            use_clipboard=1
            ;;
        (d)
            operation=download
            ;;
        (e)
            operation=edit
            ;;
        (f)
            format="$OPTARG"
            ;;
        (h)
            operation=usage
            ;;
        (i)
            interactive=1
            ;;
        (I)
            interactive=0
            ;;
        (n)
            operation=enqueue
            ;;
        (r)
            resolution="$OPTARG"
            ;;
        (?)
            usage >&2
            exit 2
            ;;
    esac
done
shift $((OPTIND - 1))

if [ -z "$operation" ]; then
    echo "No operation selected" >&2
    exit 3
fi

$operation "$@"
